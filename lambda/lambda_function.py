import json
import time
import os
import boto3
import requests
from datetime import datetime

# Set up AWS DynamoDB and environment variables
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table(os.environ['DDB_TABLE'])
SLACK_URL = os.environ['SLACK_WEBHOOK_URL']
THRESHOLD = int(os.environ.get("ALERT_THRESHOLD", 5))
WINDOW_SECONDS = int(os.environ.get("ALERT_WINDOW_SECONDS", 300))

def lambda_handler(event, context):
    body = json.loads(event['body'])

    if body.get("eventType") != "group.user_membership.remove":
        return {"statusCode": 200, "body": "Ignored"}

    # Extract group info
    group_info = next((t for t in body["target"] if t["type"] == "UserGroup"), None)
    user_info = next((t for t in body["target"] if t["type"] == "User"), None)
    if not group_info or not user_info:
        return {"statusCode": 400, "body": "Invalid payload"}

    group_name = group_info["displayName"]
    removed_user = user_info.get("displayName", "Unknown User")
    actor = body.get("actor", {}).get("displayName", "Unknown Actor")
    published_time = body.get("published", "")
    published_time = datetime.strptime(published_time, "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%Y-%m-%d %H:%M:%S")

    timestamp = int(time.time())
    ttl = timestamp + WINDOW_SECONDS

    # Insert the event
    table.put_item(Item={
        "group_name": group_name,
        "timestamp": timestamp,
        "ttl": ttl,
        "user": removed_user
    })

    # Query recent events for the same group
    response = table.query(
        KeyConditionExpression="#g = :g AND #ts >= :start",
        ExpressionAttributeNames={
            "#g": "group_name",
            "#ts": "timestamp"
        },
        ExpressionAttributeValues={
            ":g": group_name,
            ":start": timestamp - WINDOW_SECONDS
        }
    )

    removed_users = [item.get("user", "Unknown") for item in response['Items']]
    # unique_users = list(set(removed_users))

    # Alert if threshold exceeded
    item_count = len(response['Items'])
    print(f"Item count in last {WINDOW_SECONDS} seconds: {item_count}")

    if item_count > THRESHOLD:
        slack_blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "High Volume Okta Group Removals Detected"
                }
            },
            {
                "type": "section",
                "fields": [
                    {"type": "mrkdwn", "text": f"*Group Name:*\n{group_name}"},
                    {"type": "mrkdwn", "text": f"*Removals in 5 mins:*\n{item_count}"},
                    {"type": "mrkdwn", "text": f"*Users Removed:*\n{', '.join(removed_users)}"},
                    {"type": "mrkdwn", "text": f"*Removed By:*\n{actor}"},
                    {"type": "mrkdwn", "text": f"*Timestamp:*\n{published_time}"}
                ]
            },
            {
                "type": "context",
                "elements": [
                    {"type": "mrkdwn", "text": f"_Alert generated by AWS Lambda using DynamoDB to track membership removals within a {WINDOW_SECONDS}-second window._"}
                ]
            }
        ]
        slack_response = requests.post(SLACK_URL, json={"blocks": slack_blocks})
        print(f"Slack response status: {slack_response.status_code}, body: {slack_response.text}")

    return {"statusCode": 200, "body": "Processed"}
